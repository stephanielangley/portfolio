name: ci

on:
  push:
    branches: main

jobs:
  api-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: docker/setup-buildx-action@v1

      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CITOKEN }}

      - uses: docker/build-push-action@v2
        env:
          CONTAINER: ghcr.io/${{ github.repository }}/api
        with:
          context: api
          file: api/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.CONTAINER }}:latest
          cache-from: type=registry,ref=${{ env.CONTAINER }}:buildcache
          cache-to: type=registry,ref=${{ env.CONTAINER }}:buildcache,mode=max

  api-deploy:
    needs: api-build
    runs-on: steph-1
    steps:
      - uses: actions/checkout@v2
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CITOKEN }}
      - name: Pull
        env:
          STRAVACLIENTID: ${{secrets.STRAVACLIENTID}}
          STRAVAATHLETEI: ${{secrets.STRAVAATHLETEI}}
          STRAVASECRET: ${{secrets.STRAVASECRET}}
          STRAVAAUTHURL: ${{secrets.STRAVAAUTHURL}}
        run: |
          cd api
          docker compose pull
          docker compose up -d
          docker image prune -f

  # frontend:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'

  #     - uses: actions/cache@v4
  #       with:
  #         path: ~/.npm
  #         key: npm-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: npm-

  #     - name: NPM Install
  #       run: |
  #         cd frontend
  #         npm ci --cache ~/.npm --prefer-offline

  #     - name: Build
  #       run: |
  #         cd frontend
  #         npm run build

  #     - uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Deploy frontend
  #       run: |
  #         aws s3 sync frontend/dist s3://hayleslsc.co.uk --exclude '*' --include 'assets/*' --delete --cache-control 'max-age=31536000, immutable'
  #         aws s3 sync frontend/dist s3://hayleslsc.co.uk --include '*' --exclude 'assets/*' --exclude 'uploads/*' --delete --cache-control 'max-age=60'
  #         aws cloudfront create-invalidation --distribution-id EG6X5SIQ8QPJI  --paths /index.html
